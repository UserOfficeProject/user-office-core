name: E2E and build testing.

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop and master branches
on:
  pull_request:
    branches: [develop]

env:
  NODE_VERSION: 16.x

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  resolve_dep:
    runs-on: ubuntu-latest
    outputs:
      FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}

    steps:
      - name: Resolve required repositories
        id: resolve_rep
        run: |
          # this assumes the result is an array, and .name property is used
          check_feature() {
            # first param is the branch, everything after is endpoint for curl
            local branch=$1
            local found=0
            shift
            for endpoint in $@; do
              local json=$(curl -s $endpoint)
              local branch_found=$(echo $json | jq -c ".[] | select(.name==\"$branch\") | .name")
              # to track what we found
              >&2 echo "$endpoint -> $branch_found"
              if [[ $branch_found != "" ]]; then
                found=$((found += 1))
              fi
            done
            echo $found
          }

          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches?per_page=100
          )


          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)

          CHECK_IF_IMAGE_EXISTS=$(curl -H "Authorization: Bearer $GHCR_TOKEN" https://ghcr.io/v2/userofficeproject/user-office-factory/tags/list | jq --arg TAG ${{ github.head_ref }} '.tags as $t | $TAG | IN($t[])')

          echo $CHECK_IF_IMAGE_EXISTS

          if [[ $CHECK_IF_IMAGE_EXISTS == true ]]; then
              FACTORY_TAGS=$((FACTORY_TAGS+1))
          fi


          echo $CHECK_IF_IMAGE_EXISTS

          if [[ $CHECK_IF_IMAGE_EXISTS == null  ]]; then 
              FACTORY_TAGS=$((FACTORY_TAGS+1))
          fi


          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo "FACTORY_TAG=${FACTORY_TAG}" >> $GITHUB_OUTPUT

      - name: Resolved
        run: |
          echo "FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}"

  install-and-cache:
    name: Run install and cache
    needs: resolve_dep
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-root-${{ hashFiles('package-lock.json') }}

      - name: Install root dependencies
        if: steps.cached-node-modules-root.outputs.cache-hit != 'true'
        # We use --ignore-scripts flag to ignore the postinstall script which is actually installing dependencies in all other apps.
        # Caution! The option --ignore-scripts disables ALL scripts - even from the dependencies. If the dependencies need to run scripts to e.g. install some binaries they may break / be incomplete. For now this works and if we experience some issues we can try to find better solution.
        run: npm ci --ignore-scripts

      - name: Cache backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-backend-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Install backend dependencies
        if: steps.cached-node-modules-backend.outputs.cache-hit != 'true'
        run: npm run install:backend

      - name: Cache frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-frontend-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - name: Install frontend dependencies
        if: steps.cached-node-modules-frontend.outputs.cache-hit != 'true'
        run: npm run install:frontend

      - name: Cache frontend SDK
        id: cached-sdk-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/src/generated
          key: sdk-frontend-${{ hashFiles('**/**.graphql') }}

      - name: Generate frontend SDK
        if: steps.cached-sdk-frontend.outputs.cache-hit != 'true'
        run: |
          cp apps/user-office-frontend/example.development.env apps/user-office-frontend/.env
          npm run generate:sdk

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [resolve_dep, install-and-cache]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-root-${{ hashFiles('package-lock.json') }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-backend-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Restore frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-frontend-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - name: Restore frontend SDK
        id: cached-sdk-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/src/generated
          key: sdk-frontend-${{ hashFiles('**/**.graphql') }}
          restore-keys: |
            sdk-frontend-${{ hashFiles('**/**.graphql') }}
            sdk-frontend-

      - run: npm run build
        env:
          NODE_ENV: development
          secret: ${{secrets.secret}}
          tokenLife: 7d
          SPARKPOST_TOKEN: wrong_token_for_test

  test_backend:
    runs-on: ubuntu-latest
    needs: [resolve_dep, install-and-cache]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-backend-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Run backend unit tests
        env:
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: e2e
          secret: dummysecret
          NODE_ENV: development
          tokenLife: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          npm run test:backend
  e2e:
    runs-on: ubuntu-latest
    needs: [resolve_dep, install-and-cache]

    strategy:
      fail-fast: false
      matrix:
        pattern:
          [
            "cypress/e2e/[a-e]*.ts",
            "cypress/e2e/[f-h]*.ts",
            "cypress/e2e/[i-o]*.ts",
            "cypress/e2e/p[a-m]*.ts",
            "cypress/e2e/p[n-z]*.ts",
            "cypress/e2e/[r-s]*.ts",
            "cypress/e2e/templatesBasic.cy.ts",
            "cypress/e2e/templatesAdvanced.cy.ts",
            "cypress/e2e/[u-z]*.ts",
            "cypress/e2e/[A-Z]*.ts",
          ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-root-${{ hashFiles('package-lock.json') }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-backend-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Restore frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-frontend-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - name: Restore frontend SDK
        id: cached-sdk-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/src/generated
          key: sdk-frontend-${{ hashFiles('**/**.graphql') }}
          restore-keys: |
            sdk-frontend-${{ hashFiles('**/**.graphql') }}
            sdk-frontend-

      # TODO: See how to proceed with e2e caching because there is some error:
      # - You're caching 'node_modules' but are not caching this path: /home/runner/.cache/Cypress
      # - You ran 'npm install' at an earlier build step but did not persist: /home/runner/.cache/Cypress
      # For now it doesn't take so much time to install node_modules in the e2e because there are only few.
      # - name: Cache e2e node_modules
      #   env:
      #     CYPRESS_CACHE_FOLDER: cache/Cypress
      #   id: cached-node-modules-e2e
      #   uses: actions/cache@v3
      #   with:
      #     path: apps/user-office-frontend-e2e/node_modules
      #     key: node-modules-${{ hashFiles('apps/user-office-frontend-e2e/package-lock.json') }}

      - name: Install e2e dependencies
        env:
          CYPRESS_CACHE_FOLDER: .cache/Cypress
        if: steps.cached-node-modules-e2e.outputs.cache-hit != 'true'
        run: npm run install:e2e

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Run e2e tests stfc
        env:
          USER_OFFICE_BACKEND_DIR: apps/user-office-backend
          USER_OFFICE_FRONTEND_DIR: apps/user-office-frontend
          USER_OFFICE_FRONTEND_E2E_DIR: apps/user-office-frontend-e2e
          USER_OFFICE_BACKEND: http://localhost:4000/graphql
          USER_OFFICE_ENDPOINT: $USER_OFFICE_BACKEND
          TZ: Europe/London
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: stfc
          secret: qMyLZALzs229ybdQXNyzYRdju7X784TH
          NODE_ENV: development
          baseURL: localhost:3000
          tokenLife: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          SCHEMA_URL: http://localhost:4000/graphql
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
          CYPRES_SPEC_PATTERN: ${{ matrix.pattern }}
          BUILD_TAG: ${{ github.sha }}
          CYPRESS_CACHE_FOLDER: .cache/Cypress
          EXTERNAL_AUTH_TOKEN: abc
          SINK_EMAIL: BISAPPSSINK@stfc.ac.uk
          EMAIL_SENDER: '"STFC User Office" <users@stfc.ac.uk>'
          EMAIL_AUTH_HOST: exchsmtp.stfc.ac.uk
          EMAIL_TEMPLATE_PATH: /config/emails/
          EMAIL_FOOTER_IMAGE_PATH: /config/logos/STFC-Logo-small.png
          EXTERNAL_AUTH_LOGIN_URL: http://localhost:9003/auth/Login.aspx
          EXTERNAL_AUTH_LOGOUT_URL: http://localhost:9003/auth/Login.aspx
          EXTERNAL_AUTH_SERVICE_URL: http://localhost:1080/ws/UserOfficeWebService?wsdl
          ANTIVIRUS_HOST: clam-antivirus
          ANTIVIRUS_PORT: 3310
          ISIS_UO_EMAIL: isisuo@stfc.ac.uk
          FBS_EMAIL: FacilitiesBusinessSystem@stfc.ac.uk
          PROFILE_PAGE_LINK: http://localhost:9003/auth/ManageDetails.aspx
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          npm run e2e:after:dev:stfc

      - name: Run e2e tests
        env:
          USER_OFFICE_BACKEND_DIR: apps/user-office-backend
          USER_OFFICE_FRONTEND_DIR: apps/user-office-frontend
          USER_OFFICE_FRONTEND_E2E_DIR: apps/user-office-frontend-e2e
          USER_OFFICE_BACKEND: http://localhost:4000/graphql
          USER_OFFICE_ENDPOINT: $USER_OFFICE_BACKEND
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: e2e
          secret: qMyLZALzs229ybdQXNyzYRdju7X784TH
          NODE_ENV: development
          baseURL: localhost:3000
          tokenLife: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          SCHEMA_URL: http://localhost:4000/graphql
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
          CYPRES_SPEC_PATTERN: ${{ matrix.pattern }}
          BUILD_TAG: ${{ github.sha }}
          CYPRESS_CACHE_FOLDER: .cache/Cypress
          EAM_AUTH_URL: https://ios.esss.lu.se
          EAM_AUTH_SECRET: dummyEAMsecret
          EAM_AUTH_USER: dummyAuthUser
          EAM_AUTH_PASS: dummyAuthPass
          EAM_API_URL: https://ios.esss.lu.se:7443
          EAM_PART_CODE: 12413
          AUTH_DISCOVERY_URL: http://localhost:5000/.well-known/openid-configuration
          AUTH_CLIENT_ID: useroffice
          AUTH_CLIENT_SECRET: useroffice
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          npm run e2e:after:dev

      - name: Upload cypres screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: apps/user-office-frontend-e2e/cypress/screenshots

  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Don't build and push image if dependabot is creating the PR
    if: github.actor != 'dependabot[bot]'
    needs: [install-and-cache, e2e]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # TODO: Maybe it is a good idea to use some caching mechanism here for building docker images.
      - uses: actions/checkout@v3

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        # Don't login if dependabot is creating the PR
        if: ${{ !startsWith(github.head_ref, 'dependabot') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./apps/user-office-backend
          file: ./apps/user-office-backend/Dockerfile
          # Build but don't push if dependabot is creating the PR
          push: ${{ !startsWith(github.head_ref, 'dependabot') }}
          tags: ghcr.io/userofficeproject/user-office-backend:${{ github.head_ref }}

      - name: Restore frontend SDK
        id: cached-sdk-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/src/generated
          key: sdk-frontend-${{ hashFiles('**/**.graphql') }}
          restore-keys: |
            sdk-frontend-${{ hashFiles('**/**.graphql') }}
            sdk-frontend-

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./apps/user-office-frontend
          file: ./apps/user-office-frontend/Dockerfile
          # Build but don't push if dependabot is creating the PR
          push: ${{ !startsWith(github.head_ref, 'dependabot') }}
          tags: ghcr.io/userofficeproject/user-office-frontend:${{ github.head_ref }}
