name: E2E and build testing.

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop and master branches
on:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  resolve_dep:
    runs-on: ubuntu-latest
    outputs:
      BE_TAG: ${{ steps.resolve_rep.outputs.BE_TAG }}
      FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}

    steps:
      - name: Resolve required repositories
        id: resolve_rep
        run: |
          # this assumes the result is an array, and .name property is used
          check_feature() {
            # first param is the branch, everything after is endpoint for curl
            local branch=$1
            local found=0
            shift

            local dockerhub_endpoint=$1
            local dockerhub_json=$(curl -s $dockerhub_endpoint)
            local dockerhub_branch_found=$(echo $dockerhub_json | jq -c ".results[] | select(.name==\"$branch\") | .name")
            # to track what we found
            >&2 echo "$dockerhub_endpoint -> $dockerhub_branch_found"
            if [[ $dockerhub_branch_found != "" ]]; then
              found=$((found += 1))
            fi

            local github_endpoint=$2
            local github_json=$(curl -s $github_endpoint)
            local github_branch_found=$(echo $github_json | jq -c ".[] | select(.name==\"$branch\") | .name")
            # to track what we found
            >&2 echo "$github_endpoint -> $github_branch_found"
            if [[ $github_branch_found != "" ]]; then
              found=$((found += 1))
            fi

            echo $found
          }

          BE_TAGS=$(check_feature ${{ github.head_ref }} \
            https://registry.hub.docker.com/v2/repositories/dmsc/duo-backend/tags \
            https://api.github.com/repos/UserOfficeProject/user-office-backend/branches?per_page=100
          )
          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://registry.hub.docker.com/v2/repositories/dmsc/duo-factory/tags \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches?per_page=100
          )

          BE_TAG=develop
          if [[ $BE_TAGS == "2" ]]; then
            BE_TAG="${{ github.head_ref }}"
          fi

          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo ::set-output name=BE_TAG::${BE_TAG}
          echo ::set-output name=FACTORY_TAG::${FACTORY_TAG}

      - name: Resolved
        run: |
          echo "BE_TAG: ${{ steps.resolve_rep.outputs.BE_TAG }}"
          echo "FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}"

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: resolve_dep

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Cache node_modules
        id: cached-modules
        uses: actions/cache@v2
        env:
          cache-name: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        if: steps.cached-modules.outputs.cache-hit != 'true'
        run: npm ci --production --loglevel error --no-fund

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          services:
            proxy:
              image: traefik:1.7
              command: --api --docker
              ports:
                - "80:80" # The HTTP port
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
              depends_on:
                - "db"
            backend:
              labels:
                - "traefik.frontend.rule=PathPrefix:/api, /downloads, /files, /download, /uploads, /gateway, /graphql"
              depends_on:
                - "proxy"
          EOF

      - name: Run docker-compose, generate and compare SDK
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ needs.resolve_dep.outputs.BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend
          export USER_OFFICE_BACKEND=http://backend:4000/graphql
          export USER_OFFICE_ENDPOINT=$USER_OFFICE_BACKEND

          export USER_OFFICE_FACTORY_ENDPOINT=noop

          docker-compose --project-directory $PWD \
            -f user-office-backend/docker-compose.e2e.yml \
            -f docker-compose.all.yml \
            up -d

          export SCHEMA_URL=http://localhost:80/graphql

          while true; do
            STATUS=$(curl \
              -o /dev/stderr \
              --silent \
              --write-out '%{http_code}' \
              "$SCHEMA_URL?query=query%7Bversion%7D") # ?query=query{version}, without this we would get an error saying GET query missing

            if [[ "$STATUS" == "200" ]]; then
              echo "backend is ready"
              break
            fi

            >&2 echo " - backend is unavailable - sleeping for 10 sec... ($STATUS). Last 20 lines of logs:"
            docker-compose -f docker-compose.all.yml -f user-office-backend/docker-compose.e2e.yml logs --tail 20 backend
            sleep 10
          done;

          cd $GITHUB_WORKSPACE

          sed -i 's/\r$//' src/generated/sdk.ts  # make sure we don't fail because of line ending differences (CRLF / LF)
          GIT_TRACKED_SUM=$(sha256sum src/generated/sdk.ts)
          cp src/generated/sdk.ts /tmp/sdk_git_tracked.ts

          npm run generate:local

          sed -i 's/\r$//' src/generated/sdk.ts  # make sure we don't fail because of line ending differences (CRLF / LF)
          PIPELINE_GENERATED_SUM=$(sha256sum src/generated/sdk.ts)
          cp src/generated/sdk.ts /tmp/sdk_pipeline_generated.ts

          # for debugging
          echo -e "GIT_TRACKED_SUM:\t$GIT_TRACKED_SUM"
          echo -e "PIPELINE_GENERATED_SUM:\t$PIPELINE_GENERATED_SUM"
          git diff

          # if there is a mismatch it will fail
          echo "$GIT_TRACKED_SUM" | sha256sum -c

          docker stop $(docker ps -q)

      - name: Upload git tracked and pipeline generated SDK
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: sdk-files
          path: /tmp/sdk_*

      - name: Cache app docker layers and image
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.head_ref }}-
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        if: steps.cached-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v1

      - name: Build and cache image
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-image-cache
          TAG=duo-frontend:${{ github.sha }}

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -t $TAG -o type=docker,dest=- . > /tmp/.buildx-image-cache/img.tar

  cypress:
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build new e2e test image if changed
        run: |
          DOCKERFILE_VERSION=${{ hashFiles('Dockerfile.e2e', 'cypress/*.json') }}
          MANIFEST_URL="https://docker.pkg.github.com/v2/userofficeproject/user-office-frontend/e2e-cypress-core/manifests/$DOCKERFILE_VERSION"
          MANIFEST_STATUS=$(curl -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' -o /dev/null --silent --get --write-out '%{http_code}' $MANIFEST_URL)
          TAG="docker.pkg.github.com/userofficeproject/user-office-frontend/e2e-cypress-core:$DOCKERFILE_VERSION"

          echo MANIFEST_STATUS $MANIFEST_STATUS

          if [[ $MANIFEST_STATUS != "200" ]]; then
            docker build -t $TAG --file Dockerfile.e2e .
            docker push $TAG
          fi
  e2e:
    runs-on: ubuntu-latest
    needs: [resolve_dep, cypress]

    strategy:
      fail-fast: false
      matrix:
        pattern:
          [
            "cypress/integration/[a-e]*.ts",
            "cypress/integration/[f-i]*.ts",
            "cypress/integration/[j-o]*.ts",
            "cypress/integration/p[a-m]*.ts",
            "cypress/integration/p[n-z]*.ts",
            "cypress/integration/[r-s]*.ts",
            "cypress/integration/templates_basic.ts",
            "cypress/integration/templates_advanced.ts",
            "cypress/integration/[u-z]*.ts",
            "cypress/integration/[A-Z]*.ts",
          ]

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cypress image
        run: |
          DOCKERFILE_VERSION=${{ hashFiles('Dockerfile.e2e', 'cypress/*.json') }}
          TAG="docker.pkg.github.com/userofficeproject/user-office-frontend/e2e-cypress-core:$DOCKERFILE_VERSION"
          docker pull $TAG
          docker tag $TAG e2e-cypress:latest

      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on app cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          services:
            backend:
              labels:
                - "traefik.frontend.rule=PathPrefix:/api, /downloads, /files, /download, /uploads, /gateway, /graphql"
          EOF

      - name: Run docker-compose
        env:
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ needs.resolve_dep.outputs.BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend
          export USER_OFFICE_BACKEND=http://backend:4000/graphql
          export USER_OFFICE_ENDPOINT=$USER_OFFICE_BACKEND

          export USER_OFFICE_FACTORY_TAG=${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          export USER_OFFICE_FACTORY_ENDPOINT=http://factory:4500/generate

          export USER_OFFICE_FRONTEND_DIR=$REPO_DIR_NAME
          export BUILD_TAG=${{ github.sha }}

          export CYPRES_SPEC_PATTERN=${{ matrix.pattern }}

          docker-compose --project-directory $PWD \
            -f user-office-backend/docker-compose.e2e.yml \
            -f user-office-factory/docker-compose.e2e.yml \
            -f "$REPO_DIR_NAME/docker-compose.e2e.yml" \
            -f docker-compose.all.yml \
            up --exit-code-from cypress

      - name: Run docker-compose stfc
        env:
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ needs.resolve_dep.outputs.BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend
          export USER_OFFICE_BACKEND=http://backend:4000/graphql
          export USER_OFFICE_ENDPOINT=$USER_OFFICE_BACKEND

          export USER_OFFICE_FACTORY_TAG=${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          export USER_OFFICE_FACTORY_ENDPOINT=http://factory:4500/generate

          export USER_OFFICE_FRONTEND_DIR=$REPO_DIR_NAME
          export BUILD_TAG=${{ github.sha }}

          export CYPRES_SPEC_PATTERN=${{ matrix.pattern }}

          docker-compose --project-directory $PWD \
            -f "$REPO_DIR_NAME/docker-compose-stfc.e2e.yml" \
            up -d mockServer

            sleep 10

          docker-compose --project-directory $PWD \
            -f "$REPO_DIR_NAME/docker-compose-stfc.e2e.yml" \
            up --exit-code-from cypress

      - name: Upload cypres screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: e2e
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push
        run: |
          docker tag duo-frontend:${{ github.sha }} dmsc/duo-frontend:${{ github.head_ref }}
          docker push dmsc/duo-frontend:${{ github.head_ref }}
