name: E2E and build testing.

on:
  pull_request:
    branches: [develop]

env:
  NODE_VERSION: 18.x
  FRONTEND_SDK_KEY: sdk-frontend-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  resolve_dep:
    runs-on: self-hosted
    outputs:
      FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}
    steps:
      - name: Resolve required repositories
        id: resolve_rep
        run: |
          check_feature() {
            local branch=$1
            local found=0
            shift
            for endpoint in $@; do
              local json=$(curl -s $endpoint)
              local branch_found=$(echo $json | jq -c ".[] | select(.name==\"$branch\") | .name")
              >&2 echo "$endpoint -> $branch_found"
              if [[ $branch_found != "" ]]; then
                found=$((found += 1))
              fi
            done
            echo $found
          }

          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches?per_page=100
          )

          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)

          CHECK_IF_IMAGE_EXISTS=$(curl -H "Authorization: Bearer $GHCR_TOKEN" https://ghcr.io/v2/userofficeproject/user-office-factory/tags/list | jq --arg TAG ${{ github.head_ref }} '.tags as $t | $TAG | IN($t[])')

          echo $CHECK_IF_IMAGE_EXISTS

          if [[ $CHECK_IF_IMAGE_EXISTS == true ]]; then
              FACTORY_TAGS=$((FACTORY_TAGS+1))
          fi

          echo $CHECK_IF_IMAGE_EXISTS

          if [[ $CHECK_IF_IMAGE_EXISTS == null ]]; then
              FACTORY_TAGS=$((FACTORY_TAGS+1))
          fi

          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo "FACTORY_TAG=${FACTORY_TAG}" >> $GITHUB_OUTPUT

      - name: Resolved
        run: |
          echo "FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}"

  install-and-cache:
    name: Run install and cache
    needs: resolve_dep
    runs-on: self-hosted

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      
      - name: Install root dependencies
        run: npm ci --ignore-scripts

      - name: Install backend dependencies
        run: npm run install:backend

      - name: Install frontend dependencies
        run: npm run install:frontend

      - name: Generate frontend SDK
        run: |
          cp apps/frontend/example.development.env apps/frontend/.env
          npm run generate:sdk

      - name: Upload SDK artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-sdk
          path: apps/frontend/src/generated
  build:
    runs-on: self-hosted
    needs: install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm ci

      - name: Download SDK artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-sdk
          path: apps/frontend/src/generated

      - run: npm run build
        env:
          NODE_ENV: development
          JWT_SECRET: ${{ secrets.secret }}
          JWT_TOKEN_LIFE: 7d
          SPARKPOST_TOKEN: wrong_token_for_test

  test_backend:
    runs-on: self-hosted
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      
      - name: Run backend unit tests
        env:
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: e2e
          JWT_SECRET: dummysecret
          NODE_ENV: development
          JWT_TOKEN_LIFE: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)
          npm run test:backend

  e2e:
    runs-on: self-hosted
    needs: [resolve_dep, build]

    strategy:
      fail-fast: false
      matrix:
        pattern:
          - id: ae
            files: cypress/e2e/[a-e]*.ts
          - id: fh
            files: cypress/e2e/[f-h]*.ts
          - id: io
            files: cypress/e2e/[i-o]*.ts
          - id: p-am
            files: cypress/e2e/p[a-m]*.ts
          - id: p-nz
            files: cypress/e2e/p[n-z]*.ts
          - id: rs
            files: cypress/e2e/[r-s]*.ts
          - id: t
            files: cypress/e2e/t*.ts
          - id: uz
            files: cypress/e2e/[u-z]*.ts
          - id: AZ
            files: cypress/e2e/[A-Z]*.ts

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      
      # The commented cache for e2e node_modules is also removed
      - name: Install e2e dependencies
        env:
          CYPRESS_CACHE_FOLDER: .cache/Cypress
        run: npm run install:e2e

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Run e2e tests stfc
        env:
          USER_OFFICE_BACKEND_DIR: apps/backend
          USER_OFFICE_FRONTEND_DIR: apps/frontend
          USER_OFFICE_FRONTEND_E2E_DIR: apps/e2e
          USER_OFFICE_BACKEND: http://localhost:4000/graphql
          USER_OFFICE_ENDPOINT: $USER_OFFICE_BACKEND
          TZ: Europe/London
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: stfc
          JWT_SECRET: qMyLZALzs229ybdQXNyzYRdju7X784TH
          NODE_ENV: development
          BASE_URL: localhost:3000
          JWT_TOKEN_LIFE: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          SCHEMA_URL: http://localhost:4000/graphql
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
          CYPRES_SPEC_PATTERN: ${{ matrix.pattern.files }}
          BUILD_TAG: ${{ github.sha }}
          CYPRESS_CACHE_FOLDER: .cache/Cypress
          EXTERNAL_AUTH_TOKEN: abc
          SINK_EMAIL: BISAPPSSINK@stfc.ac.uk
          EMAIL_SENDER: '"STFC User Office" <users@stfc.ac.uk>'
          EMAIL_AUTH_HOST: exchsmtp.stfc.ac.uk
          EMAIL_TEMPLATE_PATH: /config/emails/
          EMAIL_FOOTER_IMAGE_PATH: /config/logos/STFC-Logo-small.png
          EXTERNAL_AUTH_LOGIN_URL: http://localhost:9003/auth/Login.aspx
          EXTERNAL_AUTH_LOGOUT_URL: http://localhost:9003/auth/Login.aspx
          EXTERNAL_AUTH_SERVICE_URL: http://localhost:1080/ws/UserOfficeWebService?wsdl
          ANTIVIRUS_HOST: clam-antivirus
          ANTIVIRUS_PORT: 3310
          ISIS_UO_EMAIL: isisuo@stfc.ac.uk
          FBS_EMAIL: FacilitiesBusinessSystem@stfc.ac.uk
          PROFILE_PAGE_LINK: http://localhost:9003/auth/ManageDetails.aspx
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)
          npm run e2e:after:dev:stfc

      - name: Run e2e tests
        env:
          USER_OFFICE_BACKEND_DIR: apps/backend
          USER_OFFICE_FRONTEND_DIR: apps/frontend
          USER_OFFICE_FRONTEND_E2E_DIR: apps/e2e
          USER_OFFICE_BACKEND: http://localhost:4000/graphql
          USER_OFFICE_ENDPOINT: $USER_OFFICE_BACKEND
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          PING_PUBLIC_CRT: dummypingsecret
          DEPENDENCY_CONFIG: e2e
          JWT_SECRET: qMyLZALzs229ybdQXNyzYRdju7X784TH
          NODE_ENV: development
          BASE_URL: localhost:3000
          JWT_TOKEN_LIFE: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          SCHEMA_URL: http://localhost:4000/graphql
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
          CYPRES_SPEC_PATTERN: ${{ matrix.pattern.files }}
          BUILD_TAG: ${{ github.sha }}
          CYPRESS_CACHE_FOLDER: .cache/Cypress
          EAM_API_URL: https://ios.esss.lu.se
          EAM_AUTH_USER: dummyAuthUser
          EAM_AUTH_PASSWORD: dummyEAMsecret
          EAM_AUTH_TENANT: dummyTenant
          EAM_AUTH_ORGANIZATION: dummyOrg
          EAM_EQUIPMENT_PART_CODE: 12413
          AUTH_DISCOVERY_URL: http://localhost:5000/.well-known/openid-configuration
          AUTH_CLIENT_ID: useroffice
          AUTH_CLIENT_SECRET: useroffice
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)
          npm run e2e:after:dev -- --dns-result-order=ipv4first

      - name: Upload cypres screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-${{ matrix.pattern.id }}
          path: apps/e2e/cypress/screenshots
