name: Build && Push

# Controls when the action will run
on:
  push:
    branches:
      - develop
      - staging

env:
  NODE_VERSION: 16.x

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # List of jobs
  build:
    # The type of virtual machine that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - id: extract_branch
        uses: swapActions/get-branch-name@v1

      - name: Create backend image tags
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/userofficeproject/user-office-backend
          flavor: latest=true # adds :latest tag to outputs.tags
          tags: | # adds :<sha> tag to outputs.tags
            type=sha,format=long,prefix=
            type=raw,value=${{ steps.extract_branch.outputs.branch }}

      - name: Create frontend image tags
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/userofficeproject/user-office-frontend
          flavor: latest=true # adds :latest tag to outputs.tags
          tags: | # adds :<sha> tag to outputs.tags
            type=sha,format=long,prefix=
            type=raw,value=${{ steps.extract_branch.outputs.branch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Set environment variables
        run: cp apps/user-office-frontend/example.development.env apps/user-office-frontend/.env

      - name: Generate SDK
        run: npm run generate:sdk

      - name: Build and push backend
        uses: docker/build-push-action@v3
        with:
          context: ./apps/user-office-backend
          file: ./apps/user-office-backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}

      - name: Build and push frontend
        uses: docker/build-push-action@v3
        with:
          context: ./apps/user-office-frontend
          file: ./apps/user-office-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}

      - name: Trigger pipeline
        uses: swapActions/trigger-swap-deployment@v1
        with:
          repository: ${{ github.event.repository.name }}
          environment: ${{ steps.extract_branch.outputs.branch }}
          gh-trigger-url: ${{ secrets.GITLAB_TRIGGER_URL }}
          gh-token: ${{ secrets.GITLAB_TRIGGER_TOKEN }}
          image-tag: ${{ github.sha }}

      - name: Trigger frontend deployment at STFC
        if: ${{ steps.extract_branch.outputs.branch == 'develop' }} # Only trigger Jenkins for develop branch
        run: |
          curl -k -l -u ${{ secrets.STFC_CI_TRIGGER_USERNAME }}:${{ secrets.STFC_CI_TRIGGER_TOKEN }} "${{ secrets.STFC_CI_TRIGGER_BASE_URL }}/Dev_Deploy_ProposalFrontend.LatestImage/build?token=${{ secrets.STFC_CI_TRIGGER_URL_TOKEN }}"

      - name: Trigger backend deployment at STFC
        if: ${{ steps.extract_branch.outputs.branch == 'develop' }} # Only trigger Jenkins for develop branch
        run: |
          curl -k -l -u ${{ secrets.STFC_CI_TRIGGER_USERNAME }}:${{ secrets.STFC_CI_TRIGGER_TOKEN }} "${{ secrets.STFC_CI_TRIGGER_BASE_URL }}/Dev_Deploy_ProposalBackend.LatestImage/build?token=${{ secrets.STFC_CI_TRIGGER_URL_TOKEN }}"
