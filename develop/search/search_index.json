{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-user-office","title":"Welcome to User Office","text":"<p>The User Office Project is an international collaboration to build flexible web software designed to efficiently run and organize user programs at various scientific facilities.</p> <p>We have built this software with flexibility in mind - allowing user officers and user program managers to configure the software to the specific needs of their facility.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Proposal Submission: Scientists can submit proposals based on questionnaires and calls defined by user officers.</li> <li>Workflow Definition: User officers can define workflows to describe different facility access routes.</li> <li>Technical Reviews: Facility science staff can submit technical reviews on each proposal.</li> <li>Science Evaluation Panels: Science evaluation panels can be set up to review proposals.</li> </ul>"},{"location":"#who-uses-user-office","title":"Who uses User Office?","text":""},{"location":"#european-spallation-source","title":"European Spallation Source","text":"<p>The European Spallation Source (ESS) started building this software in 2018 with the vision that it would work for any facility. The ESS has been using the software to run their Deuteration and Macromolecular Crystallisation (DEMAX) facility since 2020.</p>"},{"location":"#science-and-technology-facilities-council","title":"Science and Technology Facilities Council","text":"<p>The Science and Technology Facilities Council (STFC) joined the collaboration with the ESS in 2020. The software has been used to accept proposals for facilities at STFC since late 2021 and has been rolled out to the ISIS Neutron and Muon Source, and the Central Laser Facility.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>Get started here</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#purpose","title":"Purpose","text":"<p>Answers to frequently asked questions</p>"},{"location":"faq/#contents","title":"Contents","text":"<p>List of questions and their answers.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#purpose","title":"Purpose","text":"<p>Definitions of terms used in the documentation.</p>"},{"location":"glossary/#contents","title":"Contents","text":"<p>Alphabetical list of terms and their definitions.</p>"},{"location":"quick-start/","title":"Quick start","text":"<p>To try out User Office, go here.</p> <p>Alternatively, you can run it locally by following this guide.</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<p>Prerequisites..</p>"},{"location":"quick-start/#initial-configuration","title":"Initial Configuration","text":"<p>Initial configuration..</p>"},{"location":"developer-guide/CONTRIBUTING/","title":"Contributing","text":"<p>Thank you for considering contributing to User Office Project!</p> <p>You can find the repo here.</p> <p>If you're planning to contribute to this project by adding new functionality, we encourage you to discuss it first in the Discussions tab. This helps ensure that your proposed changes align with the project's goals and prevents duplicate efforts. Here's how you can initiate a discussion:</p> <ol> <li>Go to the Discussions tab.</li> <li>Start a new discussion thread outlining your proposed changes.</li> <li>Wait for feedback and consensus before proceeding with creating a pull request.</li> </ol>"},{"location":"developer-guide/CONTRIBUTING/#guidelines","title":"Guidelines","text":"<ul> <li>Commits follow the Angular commit convention</li> <li>JavaScript is written using ES2015 features</li> <li>2 spaces indentation</li> <li>Features and bug fixes should be covered by test cases</li> </ul>"},{"location":"developer-guide/CONTRIBUTING/#creating-releases","title":"Creating releases","text":"<p>UserOfficeProject/user-office-core uses semantic-release to release new versions automatically.</p> <ul> <li>Commits of type <code>fix</code> will trigger bugfix releases, think <code>0.0.1</code></li> <li>Commits of type <code>feat</code> will trigger feature releases, think <code>0.1.0</code></li> <li>Commits with <code>BREAKING CHANGE</code> in body or footer will trigger breaking releases, think <code>1.0.0</code></li> </ul> <p>All other commit types will trigger no new release.</p> <p>NOTE: When merging the pull requests with <code>Squash and merge</code> option on github, the title of the pull request should follow the commit guidelines mentioned above because all the commits are squashed into one commit with title od the PR as a message of the commit. Otherwise when using normal <code>Merge pull request</code> the title of the pull request doesn't need to follow the commit guidelines but only the commit messages.</p>"},{"location":"developer-guide/achitecture/","title":"Architecture","text":"<p>The following picture shows the components of the User Office architecture.</p> <p></p>"},{"location":"developer-guide/achitecture/#components","title":"Components","text":"<p>The User Office application is a comprehensive system designed to handle user interactions, proposal submissions, reviews, and scheduling.  The architecture consists of several core components that interact through GraphQL and RabbitMQ for seamless communication and data flow.</p> <p>At the heart of the system is the User Office Core, which includes the User Office Frontend, responsible for the main user interface,  proposal submissions, reviews, and visits. The User Office Backend manages requests from the frontend, interfaces with the database,  and handles authentication services. Additionally, the User Office Factory generates PDF and Excel files for the frontend, while the User Office Cron performs asynchronous backend tasks such as user cleanup after inactivity.</p> <p>The User Office Gateway combines APIs from the scheduler backend and core backend, providing a unified GraphQL API essential for systems using the scheduler. The User Office Scheduler consists of two parts: the User Office Scheduler Frontend, which manages the scheduling  interface, and the User Office Scheduler Backend, which serves as the main source of scheduling information and interfaces with the core backend via RabbitMQ.</p> <p>External dependencies such as SciCat, NICOS, and Asset Management systems interface with the User Office application, ensuring efficient asset management and other related tasks. The entire system architecture is designed for robust and scalable performance, facilitating efficient user management, data handling, and background processing operations.</p>"},{"location":"developer-guide/api-documentation/","title":"API Documentation","text":""},{"location":"developer-guide/api-documentation/#introduction","title":"Introduction","text":"<p>The User Office application API provides endpoints to manage user interactions, proposal submissions, reviews, and scheduling. The API is primarily based on GraphQL, with some REST endpoints for specific functions.</p>"},{"location":"developer-guide/api-documentation/#user-office-core-api","title":"User Office Core API","text":""},{"location":"developer-guide/api-documentation/#user-office-frontend","title":"User Office Frontend","text":""},{"location":"developer-guide/api-documentation/#graphql-endpoints","title":"GraphQL Endpoints","text":"<p>Base URL: https://staging.useroffice.ess.eu/graphql</p> <p>Queries</p> <ul> <li><code>x</code></li> <li>Description: Fetches details of a user by ID.</li> <li>Example:</li> <li>Description: Retrieves proposals based on status.</li> <li>Example:</li> </ul> <p>Mutations</p>"},{"location":"developer-guide/api-documentation/#data-models","title":"Data Models","text":""},{"location":"developer-guide/api-documentation/#error-handling","title":"Error Handling","text":"<ul> <li>400 Bad Request: The request could not be understood or was missing required parameters.</li> <li>401 Unauthorized: Authentication failed or user does not have permissions for the requested operation.</li> <li>404 Not Found: The requested resource could not be found.</li> <li>500 Internal Server Error: An error occurred on the server.</li> </ul>"},{"location":"developer-guide/configuration/","title":"Configuration","text":""},{"location":"developer-guide/configuration/#purpose","title":"Purpose","text":"<p>Configuration options and details.</p>"},{"location":"developer-guide/configuration/#contents","title":"Contents","text":"<p>Configuration files, environment variables and settings.</p>"},{"location":"developer-guide/running-locally/","title":"Running locally","text":"<p>To successfully run both the backend and frontend of the project locally, follow these steps:</p>"},{"location":"developer-guide/running-locally/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed on your machine:</p> <ul> <li>Node.js</li> <li>npm</li> <li>Docker (if using Docker Compose)</li> </ul>"},{"location":"developer-guide/running-locally/#installation","title":"Installation","text":"<p>1. Install Dependencies</p> <p>Navigate to the root directory of your project and install all necessary dependencies:</p> <p><code>npm install</code></p> <p>2. Start the Application</p> <p>Start the application in development mode:</p> <p><code>npm run dev</code></p> <p>Alternatively, you can use:</p> <p><code>npm run start</code></p>"},{"location":"developer-guide/running-locally/#configuration","title":"Configuration","text":"<p>Check the '.env' File</p> <p>The application requires environment variables to be set. If a .env file is not present at startup, it will be generated using the example.development.env template.</p> <pre><code>Backend: apps/backend/.env\nFrontend: apps/frontend/.env\n</code></pre> <p>Ensure these files are correctly configured before starting the application. For more information about configuration, visit the Configuration tab</p>"},{"location":"developer-guide/running-locally/#running-with-docker-compose","title":"Running with Docker Compose","text":"<p>For testing purposes, you can use Docker Compose to quickly set up the project. Follow these steps:</p> <p>1. Start Docker Compose</p> <p>Navigate to the root directory of your project and run:</p> <p><code>docker compose up</code></p> <p>2. Access the Application</p> <ul> <li>Open your browser and visit http://localhost:33000.</li> <li>Use the following default credentials to log in:<ul> <li>User Officer: 'Aaron_Harris49@gmail.com' with password 'Test1234!'</li> <li>User: 'Javon4@hotmail.com' with password 'Test1234!'</li> </ul> </li> </ul>"},{"location":"developer-guide/running-locally/#graphql-playground-and-schema","title":"GraphQL Playground and Schema","text":"<p>The GraphQL Playground is an interactive, in-browser tool for writing, validating, and testing GraphQL queries. It provides a user-friendly interface to explore the GraphQL API.</p> <ul> <li>Open your browser and navigate to http://localhost:4000. This URL will direct you to the GraphQL Playground interface.</li> </ul>"},{"location":"developer-guide/running-locally/#available-scripts","title":"Available Scripts","text":""},{"location":"developer-guide/running-locally/#npm-run-lint","title":"<code>npm run lint</code>","text":"<p>Lints typescript code and log if there are any errors.</p> <p><code>npm run lint:fix</code> should be used if you want to fix all auto-fixable errors and warnings.</p>"},{"location":"user-guide/overview/","title":"Overview","text":""},{"location":"user-guide/overview/#purpose","title":"Purpose","text":"<p>General overview for users.</p>"},{"location":"user-guide/overview/#contents","title":"Contents","text":"<p>Description of what the user can do within the system, main features.</p>"}]}