/* tslint:disable */
/* eslint-disable */
/**
 * Infor Web Services Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'activityCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'activityNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'workOrderNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'peopleRequired'?: number;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'estimatedHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'hoursRemaining'?: number;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'materialList'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'taskCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'taskDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    'tradeCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof Activity
     */
    'taskQty'?: number;
    /**
     * 
     * @type {Array<WorkOrderActivityCheckList>}
     * @memberof Activity
     */
    'checklists'?: Array<WorkOrderActivityCheckList>;
    /**
     * 
     * @type {{ [key: string]: WorkOrderActivityChecklistSignatureResult; }}
     * @memberof Activity
     */
    'signatures'?: { [key: string]: WorkOrderActivityChecklistSignatureResult; };
    /**
     * 
     * @type {boolean}
     * @memberof Activity
     */
    'forceActivityExpansion'?: boolean;
}
/**
 * 
 * @export
 * @interface Bin
 */
export interface Bin {
    /**
     * 
     * @type {string}
     * @memberof Bin
     */
    'storeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bin
     */
    'binCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bin
     */
    'binDesc'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Bin
     */
    'outOfService'?: boolean;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'lineNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updateCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'creationUserCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'creationUserDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updateUserCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updateUserDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updateDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'typeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'entityKeyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'entityCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Comment
     */
    'print'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'organization'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Comment
     */
    'updated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Comment
     */
    'created'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'pk'?: string;
}
/**
 * 
 * @export
 * @interface CustomField
 */
export interface CustomField {
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'valueDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'systemEntity'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'rentCodeValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'minValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'maxValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'entityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'lovType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'lovValidate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'groupLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    'uom'?: string;
}
/**
 * 
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'typeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'typeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'systemTypeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'classDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'categoryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'categoryDesc'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'updateCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'outOfService'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'inProduction'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'profileCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'statusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'statusDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'systemStatusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'costCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'costCodeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'departmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'departmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'comissionDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'equipmentValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'assignedTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'assignedToDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'meterUnit'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'criticality'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'getcGMP'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'originalReceiptDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'stateCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'stateDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'manufacturerCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'manufacturerDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'serialNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'model'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'revision'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'getxCoordinate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'getyCoordinate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'getzCoordinate'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'vendor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'costOfNeededRepairs'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'replacementValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'facilityConditionIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'yearBuilt'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'serviceLifetime'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyAssetCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyAssetDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyAssetOrg'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyAssetDependent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyAssetCostRollUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPositionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPositionDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPositionOrg'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyPositionDependent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyPositionCostRollUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPrimarySystemCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPrimarySystemDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyPrimarySystemOrg'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyPrimarySystemDependent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchyPrimarySystemCostRollUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchySystemCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchySystemDesc'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchySystemDependent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'hierarchySystemCostRollUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyLocationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'hierarchyLocationDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'partCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'partDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'storeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'storeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'bin'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'binDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'lot'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'linearRefPrecision'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'linearRefUOM'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'linearRefEquipmentLength'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'linearRefEquipmentLengthUOM'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'linearRefGeographicalRef'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable1'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable2'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable3'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable4'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable5'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'variable6'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'dormantStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'dormantEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'dormantReusePeriod'?: string;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof Equipment
     */
    'userDefinedFields'?: UserDefinedFields;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'safety'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'originalInstallDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'getxLocation'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'getyLocation'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'lastLocationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'lastLocationDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'cernMachine'?: string;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'cernCao'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'cernX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'cernY'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'cernZ'?: number;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'cernPos'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'cernFonc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'copyFrom'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<UDLValue>; }}
     * @memberof Equipment
     */
    'userDefinedList'?: { [key: string]: Array<UDLValue>; };
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'vehicle'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Equipment
     */
    'rental'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'vehicleTypeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'availabilityStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    'issueTo'?: string;
    /**
     * 
     * @type {Array<CustomField>}
     * @memberof Equipment
     */
    'customField'?: Array<CustomField>;
}
/**
 * 
 * @export
 * @interface EquipmentReplacement
 */
export interface EquipmentReplacement {
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'oldEquipment'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'oldEquipmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'oldEquipmentStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'newEquipment'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'newEquipmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'newEquipmentStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'replacementMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReplacement
     */
    'oldEquipmentState'?: string;
}
/**
 * 
 * @export
 * @interface EquipmentReservation
 */
export interface EquipmentReservation {
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'organizationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'rentalType'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'locationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'vehicleType'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'issueTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'costCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'rentalTemplate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'customer'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'completedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'estimatedIssueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'issuedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'issueLocation'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'issuedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'returnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'estimatedReturnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentReservation
     */
    'returnLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'invoicedAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'calculatedDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'calculatedHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'correctedDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'correctedHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'adjustments'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'netAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'grossAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentReservation
     */
    'taxAmount'?: number;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof EquipmentReservation
     */
    'userDefinedFields'?: UserDefinedFields;
}
/**
 * 
 * @export
 * @interface EquipmentStructure
 */
export interface EquipmentStructure {
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'childCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'childDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'childType'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'parentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'parentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'parentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'newParentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'newParentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'newParentType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EquipmentStructure
     */
    'costRollUp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EquipmentStructure
     */
    'dependent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EquipmentStructure
     */
    'sequenceNumber'?: string;
}
/**
 * 
 * @export
 * @interface EquipmentWarranty
 */
export interface EquipmentWarranty {
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'sequenceNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'warrantyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'coverageType'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'duration'?: string;
    /**
     * 
     * @type {number}
     * @memberof EquipmentWarranty
     */
    'threshold'?: number;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentWarranty
     */
    'expirationDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EquipmentWarranty
     */
    'active'?: boolean;
}
/**
 * 
 * @export
 * @interface Finding
 */
export interface Finding {
    /**
     * 
     * @type {string}
     * @memberof Finding
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Finding
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Finding
     */
    'generic'?: string;
}
/**
 * 
 * @export
 * @interface GridRequest
 */
export interface GridRequest {
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'gridID'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'dataspyID'?: string;
    /**
     * 
     * @type {number}
     * @memberof GridRequest
     */
    'rowCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GridRequest
     */
    'cursorPosition'?: number;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'userFunctionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'gridName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'gridType'?: GridRequestGridTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'useNative'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'countTotal'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'queryTimeout'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GridRequest
     */
    'queryTimeoutWaitingTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'lang'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'returnHeaderData'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'includeMetadata'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequest
     */
    'fetchAllResults'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'departmentSecurityGridColumn'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof GridRequest
     */
    'params'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof GridRequest
     */
    'jpatype'?: string;
    /**
     * 
     * @type {Array<GridRequestFilter>}
     * @memberof GridRequest
     */
    'gridFilter'?: Array<GridRequestFilter>;
    /**
     * 
     * @type {Array<GridRequestSort>}
     * @memberof GridRequest
     */
    'gridSort'?: Array<GridRequestSort>;
}

export const GridRequestGridTypeEnum = {
    List: 'LIST',
    Lov: 'LOV'
} as const;

export type GridRequestGridTypeEnum = typeof GridRequestGridTypeEnum[keyof typeof GridRequestGridTypeEnum];

/**
 * 
 * @export
 * @interface GridRequestFilter
 */
export interface GridRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof GridRequestFilter
     */
    'fieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequestFilter
     */
    'fieldValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequestFilter
     */
    'operator'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequestFilter
     */
    'joiner'?: GridRequestFilterJoinerEnum;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequestFilter
     */
    'leftParenthesis'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequestFilter
     */
    'rightParenthesis'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequestFilter
     */
    'forceCaseInsensitive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GridRequestFilter
     */
    'upperCase'?: boolean;
}

export const GridRequestFilterJoinerEnum = {
    And: 'AND',
    Or: 'OR'
} as const;

export type GridRequestFilterJoinerEnum = typeof GridRequestFilterJoinerEnum[keyof typeof GridRequestFilterJoinerEnum];

/**
 * 
 * @export
 * @interface GridRequestSort
 */
export interface GridRequestSort {
    /**
     * 
     * @type {string}
     * @memberof GridRequestSort
     */
    'sortBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof GridRequestSort
     */
    'sortType'?: string;
}
/**
 * 
 * @export
 * @interface IssueReturnPartTransaction
 */
export interface IssueReturnPartTransaction {
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'transactionOn'?: IssueReturnPartTransactionTransactionOnEnum;
    /**
     * 
     * @type {Array<IssueReturnPartTransactionLine>}
     * @memberof IssueReturnPartTransaction
     */
    'transactionlines'?: Array<IssueReturnPartTransactionLine>;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'workOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'workOrderDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'activityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'activityDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'projectCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'projectDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'budgetCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'budgetDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'equipmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'employeeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'employeeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'storeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'storeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'departmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'transactionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'pickTicketCode'?: string;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof IssueReturnPartTransaction
     */
    'userDefinedFields'?: UserDefinedFields;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'relatedWorkOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransaction
     */
    'transactionInfo'?: string;
}

export const IssueReturnPartTransactionTransactionOnEnum = {
    Workorder: 'WORKORDER',
    Equipment: 'EQUIPMENT',
    Project: 'PROJECT',
    Employee: 'EMPLOYEE'
} as const;

export type IssueReturnPartTransactionTransactionOnEnum = typeof IssueReturnPartTransactionTransactionOnEnum[keyof typeof IssueReturnPartTransactionTransactionOnEnum];

/**
 * 
 * @export
 * @interface IssueReturnPartTransactionLine
 */
export interface IssueReturnPartTransactionLine {
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'partCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'partDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'partOrg'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'bin'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'lot'?: string;
    /**
     * 
     * @type {number}
     * @memberof IssueReturnPartTransactionLine
     */
    'transactionQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'assetIDCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IssueReturnPartTransactionLine
     */
    'assetIDDesc'?: string;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof IssueReturnPartTransactionLine
     */
    'userDefinedFields'?: UserDefinedFields;
}
/**
 * 
 * @export
 * @interface LaborBooking
 */
export interface LaborBooking {
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'typeOfHours'?: string;
    /**
     * 
     * @type {number}
     * @memberof LaborBooking
     */
    'hoursWorked'?: number;
    /**
     * 
     * @type {number}
     * @memberof LaborBooking
     */
    'startTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof LaborBooking
     */
    'endTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'dateWorked'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'departmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'employeeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'employeeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'activityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'tradeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof LaborBooking
     */
    'workOrderNumber'?: string;
}
/**
 * 
 * @export
 * @interface Lot
 */
export interface Lot {
    /**
     * 
     * @type {string}
     * @memberof Lot
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lot
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lot
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lot
     */
    'expirationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lot
     */
    'manufacturerLot'?: string;
}
/**
 * 
 * @export
 * @interface MeterReading
 */
export interface MeterReading {
    /**
     * 
     * @type {string}
     * @memberof MeterReading
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeterReading
     */
    'equipmentOrganization'?: string;
    /**
     * 
     * @type {number}
     * @memberof MeterReading
     */
    'actualValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof MeterReading
     */
    'differenceValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof MeterReading
     */
    'readingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeterReading
     */
    'woNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeterReading
     */
    'uom'?: string;
}
/**
 * 
 * @export
 * @interface Part
 */
export interface Part {
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'newCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'classDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'categoryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'categoryDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'commodityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'commodityDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'trackingMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'priceType'?: string;
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    'basePrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    'averagePrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    'standardPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    'lastPrice'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'trackByAsset'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'trackAsKit'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'trackCores'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'outOfService'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'trackByLot'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Part
     */
    'preventReorders'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'buyerCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'preferredSupplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'longDescription'?: string;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof Part
     */
    'userDefinedFields'?: UserDefinedFields;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'copyFrom'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<UDLValue>; }}
     * @memberof Part
     */
    'userDefinedList'?: { [key: string]: Array<UDLValue>; };
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'uom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    'uomdesc'?: string;
    /**
     * 
     * @type {Array<CustomField>}
     * @memberof Part
     */
    'customField'?: Array<CustomField>;
}
/**
 * 
 * @export
 * @interface UDLValue
 */
export interface UDLValue {
    /**
     * 
     * @type {string}
     * @memberof UDLValue
     */
    'type'?: UDLValueTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UDLValue
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UDLValue
     */
    'string'?: string;
    /**
     * 
     * @type {number}
     * @memberof UDLValue
     */
    'numeric'?: number;
}

export const UDLValueTypeEnum = {
    String: 'STRING',
    Date: 'DATE',
    Numeric: 'NUMERIC',
    Null: 'NULL'
} as const;

export type UDLValueTypeEnum = typeof UDLValueTypeEnum[keyof typeof UDLValueTypeEnum];

/**
 * 
 * @export
 * @interface UserDefinedFields
 */
export interface UserDefinedFields {
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar01'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar02'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar03'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar04'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar05'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar06'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar07'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar08'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar09'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar10'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar11'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar12'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar13'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar14'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar15'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar16'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar17'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar18'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar19'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar20'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar21'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar22'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar23'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar24'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar25'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar26'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar27'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar28'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar29'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar30'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar31'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar32'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar33'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar34'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar35'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar36'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar37'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar38'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar39'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar40'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar41'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar42'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar43'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar44'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar45'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfnote01'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfnote02'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar01Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar02Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar03Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar04Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar05Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar06Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar07Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar08Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar09Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar10Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar11Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar12Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar13Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar14Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar15Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar16Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar17Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar18Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar19Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar20Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar21Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar22Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar23Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar24Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar25Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar26Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar27Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar28Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar29Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar30Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar31Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar32Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar33Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar34Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar35Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar36Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar37Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar38Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar39Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar40Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar41Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar42Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar43Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar44Desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfchar45Desc'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox01'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox02'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox03'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox04'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox05'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox06'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox07'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox08'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox09'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDefinedFields
     */
    'udfchkbox10'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum01'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum02'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum03'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum04'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum05'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum06'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum07'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum08'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum09'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDefinedFields
     */
    'udfnum10'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate01'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate02'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate03'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate04'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate05'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate06'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate07'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate08'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate09'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDefinedFields
     */
    'udfdate10'?: string;
}
/**
 * 
 * @export
 * @interface WorkOrder
 */
export interface WorkOrder {
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'classCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'classDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'classOrganization'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkOrder
     */
    'updateCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'eventType'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'statusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'statusDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'systemStatusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'typeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'typeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'departmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'departmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'departmentOrganization'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'equipmentDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'equipmentOrganization'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'projectCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'projectDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'projectBudget'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'locationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'locationDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'locationOrganization'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'priorityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'priorityDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'reportedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'requestedEndDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'requestedStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'scheduledStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'scheduledEndDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'completedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'createdByDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'problemCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'failureCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'causeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'actionCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'costCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'costCodeDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'assignedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'reportedBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'reportedByDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'assignedTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'assignedToDesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'standardWO'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'standardWODesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'parentWO'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'parentWODesc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'route'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkOrder
     */
    'routeRevision'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'comment'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkOrder
     */
    'targetValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkOrder
     */
    'downtimeHours'?: number;
    /**
     * 
     * @type {UserDefinedFields}
     * @memberof WorkOrder
     */
    'userDefinedFields'?: UserDefinedFields;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'confirmedIncompleteChecklist'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'origWO'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'copyFrom'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'billable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'depend'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'issType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'warranty'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrder
     */
    'vendor'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'jtAuthCanUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'jtAuthCanInsert'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrder
     */
    'jtAuthCanDelete'?: boolean;
    /**
     * 
     * @type {{ [key: string]: Array<UDLValue>; }}
     * @memberof WorkOrder
     */
    'userDefinedList'?: { [key: string]: Array<UDLValue>; };
    /**
     * 
     * @type {Array<CustomField>}
     * @memberof WorkOrder
     */
    'customField'?: Array<CustomField>;
}
/**
 * 
 * @export
 * @interface WorkOrderActivityCheckList
 */
export interface WorkOrderActivityCheckList {
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'checkListCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'workOrderCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'activityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'sequence'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'occurrence'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'finalOccurrence'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'updateCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'result'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderActivityCheckList
     */
    'numericValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'finding'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'equipmentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'equipmentDesc'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityCheckList
     */
    'followUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'followUpWorkOrder'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityCheckList
     */
    'requiredToClose'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityCheckList
     */
    'hideFollowUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'freeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'dateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'newCheckListCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'newWorkOrderCode'?: string;
    /**
     * 
     * @type {Array<Finding>}
     * @memberof WorkOrderActivityCheckList
     */
    'possibleFindings'?: Array<Finding>;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderActivityCheckList
     */
    'minimumValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkOrderActivityCheckList
     */
    'maximumValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'notApplicableOption'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'checklistDefinitionCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityCheckList
     */
    'completed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityCheckList
     */
    'uom'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkOrderActivityCheckList
     */
    'selectedItems'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WorkOrderActivityChecklistSignatureResult
 */
export interface WorkOrderActivityChecklistSignatureResult {
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'signer'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'responsibilityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'responsibilityDescription'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'viewAsViewer'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'viewAsPerformer'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'viewAsReviewer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkOrderActivityChecklistSignatureResult
     */
    'time'?: string;
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityCode' is not null or undefined
            assertParamExists('createComment', 'entityCode', entityCode)
            // verify required parameter 'entityKeyCode' is not null or undefined
            assertParamExists('createComment', 'entityKeyCode', entityKeyCode)
            const localVarPath = `/comments/{entityCode}/{entityKeyCode}`
                .replace(`{${"entityCode"}}`, encodeURIComponent(String(entityCode)))
                .replace(`{${"entityKeyCode"}}`, encodeURIComponent(String(entityKeyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Comments
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readComments: async (entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityCode' is not null or undefined
            assertParamExists('readComments', 'entityCode', entityCode)
            // verify required parameter 'entityKeyCode' is not null or undefined
            assertParamExists('readComments', 'entityKeyCode', entityKeyCode)
            const localVarPath = `/comments/{entityCode}/{entityKeyCode}`
                .replace(`{${"entityCode"}}`, encodeURIComponent(String(entityCode)))
                .replace(`{${"entityKeyCode"}}`, encodeURIComponent(String(entityKeyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment: async (entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityCode' is not null or undefined
            assertParamExists('updateComment', 'entityCode', entityCode)
            // verify required parameter 'entityKeyCode' is not null or undefined
            assertParamExists('updateComment', 'entityKeyCode', entityKeyCode)
            const localVarPath = `/comments/{entityCode}/{entityKeyCode}`
                .replace(`{${"entityCode"}}`, encodeURIComponent(String(entityCode)))
                .replace(`{${"entityKeyCode"}}`, encodeURIComponent(String(entityKeyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.createComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Comments
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readComments(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readComments(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.readComments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.updateComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: any): AxiosPromise<void> {
            return localVarFp.createComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Comments
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readComments(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readComments(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Comment
         * @param {string} entityCode 
         * @param {string} entityKeyCode 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Comment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: any): AxiosPromise<void> {
            return localVarFp.updateComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentsApi - interface
 * @export
 * @interface CommentsApi
 */
export interface CommentsApiInterface {
    /**
     * 
     * @summary Create Comment
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Comment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    createComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Comments
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    readComments(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Comment
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Comment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    updateComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI implements CommentsApiInterface {
    /**
     * 
     * @summary Create Comment
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Comment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public createComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).createComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Comments
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public readComments(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).readComments(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Comment
     * @param {string} entityCode 
     * @param {string} entityKeyCode 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Comment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public updateComment(entityCode: string, entityKeyCode: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Comment, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).updateComment(entityCode, entityKeyCode, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EquipmentApi - axios parameter creator
 * @export
 */
export const EquipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipment: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentWarrantyCoverage: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/warrantycoverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipment: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteEquipment', 'code', code)
            const localVarPath = `/equipment/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipmentList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipment: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('readEquipment', 'code', code)
            const localVarPath = `/equipment/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Multiple Equipment
         * @param {string} equipmentcodes 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipmentList: async (equipmentcodes: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipmentcodes' is not null or undefined
            assertParamExists('readEquipmentList', 'equipmentcodes', equipmentcodes)
            const localVarPath = `/equipment/list/{equipmentcodes}`
                .replace(`{${"equipmentcodes"}}`, encodeURIComponent(String(equipmentcodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateEquipment', 'code', code)
            const localVarPath = `/equipment/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Equipment Code
         * @param {string} [currentCode] 
         * @param {string} [newCode] 
         * @param {string} [equipmentType] 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentCode: async (currentCode?: string, newCode?: string, equipmentType?: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currentCode !== undefined) {
                localVarQueryParameter['currentCode'] = currentCode;
            }

            if (newCode !== undefined) {
                localVarQueryParameter['newCode'] = newCode;
            }

            if (equipmentType !== undefined) {
                localVarQueryParameter['equipmentType'] = equipmentType;
            }

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentWarrantyCoverage: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment/warrantycoverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentApi - functional programming interface
 * @export
 */
export const EquipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquipment(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquipment(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.createEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.createEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.createEquipmentWarrantyCoverage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.deleteEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.deleteEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.readEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Multiple Equipment
         * @param {string} equipmentcodes 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEquipmentList(equipmentcodes: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEquipmentList(equipmentcodes, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.readEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.updateEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Equipment Code
         * @param {string} [currentCode] 
         * @param {string} [newCode] 
         * @param {string} [equipmentType] 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipmentCode(currentCode?: string, newCode?: string, equipmentType?: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipmentCode(currentCode, newCode, equipmentType, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.updateEquipmentCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.updateEquipmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentApi.updateEquipmentWarrantyCoverage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EquipmentApi - factory interface
 * @export
 */
export const EquipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipment(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: any): AxiosPromise<void> {
            return localVarFp.createEquipment(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: any): AxiosPromise<void> {
            return localVarFp.createEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: any): AxiosPromise<void> {
            return localVarFp.createEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Multiple Equipment
         * @param {string} equipmentcodes 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipmentList(equipmentcodes: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readEquipmentList(equipmentcodes, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Equipment
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Equipment} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Equipment Code
         * @param {string} [currentCode] 
         * @param {string} [newCode] 
         * @param {string} [equipmentType] 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentCode(currentCode?: string, newCode?: string, equipmentType?: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipmentCode(currentCode, newCode, equipmentType, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<Equipment>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Equipment Warranty Coverage
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentWarranty} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentApi - interface
 * @export
 * @interface EquipmentApi
 */
export interface EquipmentApiInterface {
    /**
     * 
     * @summary Create Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Equipment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    createEquipment(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Create Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<Equipment>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    createEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Create Equipment Warranty Coverage
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentWarranty} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    createEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    deleteEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    deleteEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    readEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Multiple Equipment
     * @param {string} equipmentcodes 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    readEquipmentList(equipmentcodes: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Equipment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    updateEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Equipment Code
     * @param {string} [currentCode] 
     * @param {string} [newCode] 
     * @param {string} [equipmentType] 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    updateEquipmentCode(currentCode?: string, newCode?: string, equipmentType?: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<Equipment>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    updateEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Equipment Warranty Coverage
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentWarranty} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApiInterface
     */
    updateEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * EquipmentApi - object-oriented interface
 * @export
 * @class EquipmentApi
 * @extends {BaseAPI}
 */
export class EquipmentApi extends BaseAPI implements EquipmentApiInterface {
    /**
     * 
     * @summary Create Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Equipment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public createEquipment(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).createEquipment(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<Equipment>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public createEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).createEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Equipment Warranty Coverage
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentWarranty} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public createEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).createEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public deleteEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).deleteEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public deleteEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).deleteEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public readEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).readEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Multiple Equipment
     * @param {string} equipmentcodes 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public readEquipmentList(equipmentcodes: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).readEquipmentList(equipmentcodes, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Equipment
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Equipment} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public updateEquipment(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Equipment, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).updateEquipment(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Equipment Code
     * @param {string} [currentCode] 
     * @param {string} [newCode] 
     * @param {string} [equipmentType] 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public updateEquipmentCode(currentCode?: string, newCode?: string, equipmentType?: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).updateEquipmentCode(currentCode, newCode, equipmentType, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<Equipment>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public updateEquipmentList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<Equipment>, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).updateEquipmentList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Equipment Warranty Coverage
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentWarranty} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public updateEquipmentWarrantyCoverage(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentWarranty, options?: RawAxiosRequestConfig) {
        return EquipmentApiFp(this.configuration).updateEquipmentWarrantyCoverage(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EquipmentReservationsApi - axios parameter creator
 * @export
 */
export const EquipmentReservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Equipment Reservation
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentReservation: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipmentreservations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipmentReservation: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteEquipmentReservation', 'code', code)
            const localVarPath = `/equipmentreservations/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipmentReservation: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('readEquipmentReservation', 'code', code)
            const localVarPath = `/equipmentreservations/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentReservation: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateEquipmentReservation', 'code', code)
            const localVarPath = `/equipmentreservations/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentReservationsApi - functional programming interface
 * @export
 */
export const EquipmentReservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentReservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Equipment Reservation
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquipmentReservation(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquipmentReservation(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentReservationsApi.createEquipmentReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentReservationsApi.deleteEquipmentReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentReservationsApi.readEquipmentReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentReservationsApi.updateEquipmentReservation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EquipmentReservationsApi - factory interface
 * @export
 */
export const EquipmentReservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentReservationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Equipment Reservation
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquipmentReservation(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: any): AxiosPromise<void> {
            return localVarFp.createEquipmentReservation(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Equipment Reservation
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentReservationsApi - interface
 * @export
 * @interface EquipmentReservationsApi
 */
export interface EquipmentReservationsApiInterface {
    /**
     * 
     * @summary Create Equipment Reservation
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReservation} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApiInterface
     */
    createEquipmentReservation(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApiInterface
     */
    deleteEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApiInterface
     */
    readEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReservation} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApiInterface
     */
    updateEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * EquipmentReservationsApi - object-oriented interface
 * @export
 * @class EquipmentReservationsApi
 * @extends {BaseAPI}
 */
export class EquipmentReservationsApi extends BaseAPI implements EquipmentReservationsApiInterface {
    /**
     * 
     * @summary Create Equipment Reservation
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReservation} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApi
     */
    public createEquipmentReservation(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig) {
        return EquipmentReservationsApiFp(this.configuration).createEquipmentReservation(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApi
     */
    public deleteEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentReservationsApiFp(this.configuration).deleteEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApi
     */
    public readEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return EquipmentReservationsApiFp(this.configuration).readEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Equipment Reservation
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReservation} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentReservationsApi
     */
    public updateEquipmentReservation(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReservation, options?: RawAxiosRequestConfig) {
        return EquipmentReservationsApiFp(this.configuration).updateEquipmentReservation(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EquipmentStructureApi - axios parameter creator
 * @export
 */
export const EquipmentStructureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Attach Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEquipmentToStructure: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipmentstructure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Equipment From Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEquipmentFromStructure: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipmentstructure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Equipment On Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReplacement} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceEquipmentOnStructure: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReplacement, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipmentstructure/replace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Equipment Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentStructure: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipmentstructure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentStructureApi - functional programming interface
 * @export
 */
export const EquipmentStructureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentStructureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Attach Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEquipmentToStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEquipmentToStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentStructureApi.addEquipmentToStructure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Equipment From Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEquipmentFromStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEquipmentFromStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentStructureApi.removeEquipmentFromStructure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Equipment On Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReplacement} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceEquipmentOnStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReplacement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceEquipmentOnStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentStructureApi.replaceEquipmentOnStructure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Equipment Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipmentStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipmentStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EquipmentStructureApi.updateEquipmentStructure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EquipmentStructureApi - factory interface
 * @export
 */
export const EquipmentStructureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentStructureApiFp(configuration)
    return {
        /**
         * 
         * @summary Attach Equipment
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEquipmentToStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: any): AxiosPromise<void> {
            return localVarFp.addEquipmentToStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Equipment From Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEquipmentFromStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: any): AxiosPromise<void> {
            return localVarFp.removeEquipmentFromStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Equipment On Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentReplacement} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceEquipmentOnStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReplacement, options?: any): AxiosPromise<void> {
            return localVarFp.replaceEquipmentOnStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Equipment Structure
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {EquipmentStructure} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipmentStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipmentStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EquipmentStructureApi - interface
 * @export
 * @interface EquipmentStructureApi
 */
export interface EquipmentStructureApiInterface {
    /**
     * 
     * @summary Attach Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApiInterface
     */
    addEquipmentToStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Remove Equipment From Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApiInterface
     */
    removeEquipmentFromStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Replace Equipment On Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReplacement} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApiInterface
     */
    replaceEquipmentOnStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReplacement, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Equipment Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApiInterface
     */
    updateEquipmentStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * EquipmentStructureApi - object-oriented interface
 * @export
 * @class EquipmentStructureApi
 * @extends {BaseAPI}
 */
export class EquipmentStructureApi extends BaseAPI implements EquipmentStructureApiInterface {
    /**
     * 
     * @summary Attach Equipment
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApi
     */
    public addEquipmentToStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig) {
        return EquipmentStructureApiFp(this.configuration).addEquipmentToStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Equipment From Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApi
     */
    public removeEquipmentFromStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig) {
        return EquipmentStructureApiFp(this.configuration).removeEquipmentFromStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Equipment On Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentReplacement} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApi
     */
    public replaceEquipmentOnStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentReplacement, options?: RawAxiosRequestConfig) {
        return EquipmentStructureApiFp(this.configuration).replaceEquipmentOnStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Equipment Structure
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {EquipmentStructure} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentStructureApi
     */
    public updateEquipmentStructure(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: EquipmentStructure, options?: RawAxiosRequestConfig) {
        return EquipmentStructureApiFp(this.configuration).updateEquipmentStructure(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GridApi - axios parameter creator
 * @export
 */
export const GridApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} gridName 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeGridQuery: async (gridName: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gridName' is not null or undefined
            assertParamExists('executeGridQuery', 'gridName', gridName)
            const localVarPath = `/grids/{gridName}/data`
                .replace(`{${"gridName"}}`, encodeURIComponent(String(gridName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQuery: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/grids/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GridApi - functional programming interface
 * @export
 */
export const GridApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GridApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} gridName 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeGridQuery(gridName: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeGridQuery(gridName, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GridApi.executeGridQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeQuery(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeQuery(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GridApi.executeQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GridApi - factory interface
 * @export
 */
export const GridApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GridApiFp(configuration)
    return {
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} gridName 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeGridQuery(gridName: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: any): AxiosPromise<void> {
            return localVarFp.executeGridQuery(gridName, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute Grid Request
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {GridRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQuery(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: any): AxiosPromise<void> {
            return localVarFp.executeQuery(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GridApi - interface
 * @export
 * @interface GridApi
 */
export interface GridApiInterface {
    /**
     * 
     * @summary Execute Grid Request
     * @param {string} gridName 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {GridRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApiInterface
     */
    executeGridQuery(gridName: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Execute Grid Request
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {GridRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApiInterface
     */
    executeQuery(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * GridApi - object-oriented interface
 * @export
 * @class GridApi
 * @extends {BaseAPI}
 */
export class GridApi extends BaseAPI implements GridApiInterface {
    /**
     * 
     * @summary Execute Grid Request
     * @param {string} gridName 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {GridRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public executeGridQuery(gridName: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig) {
        return GridApiFp(this.configuration).executeGridQuery(gridName, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute Grid Request
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {GridRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public executeQuery(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: GridRequest, options?: RawAxiosRequestConfig) {
        return GridApiFp(this.configuration).executeQuery(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IssueReturnApi - axios parameter creator
 * @export
 */
export const IssueReturnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Issue Return Part Transaction
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {IssueReturnPartTransaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueReturnPartTransaction: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: IssueReturnPartTransaction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issuereturnparttransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Issue Return Part Transactions
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<IssueReturnPartTransaction>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueReturnPartTransaction1: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<IssueReturnPartTransaction>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issuereturnparttransaction/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueReturnApi - functional programming interface
 * @export
 */
export const IssueReturnApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssueReturnApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Issue Return Part Transaction
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {IssueReturnPartTransaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueReturnPartTransaction(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: IssueReturnPartTransaction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueReturnPartTransaction(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueReturnApi.createIssueReturnPartTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Issue Return Part Transactions
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<IssueReturnPartTransaction>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueReturnPartTransaction1(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<IssueReturnPartTransaction>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueReturnPartTransaction1(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IssueReturnApi.createIssueReturnPartTransaction1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IssueReturnApi - factory interface
 * @export
 */
export const IssueReturnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssueReturnApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Issue Return Part Transaction
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {IssueReturnPartTransaction} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueReturnPartTransaction(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: IssueReturnPartTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.createIssueReturnPartTransaction(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Issue Return Part Transactions
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<IssueReturnPartTransaction>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueReturnPartTransaction1(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<IssueReturnPartTransaction>, options?: any): AxiosPromise<void> {
            return localVarFp.createIssueReturnPartTransaction1(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueReturnApi - interface
 * @export
 * @interface IssueReturnApi
 */
export interface IssueReturnApiInterface {
    /**
     * 
     * @summary Create Issue Return Part Transaction
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {IssueReturnPartTransaction} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueReturnApiInterface
     */
    createIssueReturnPartTransaction(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: IssueReturnPartTransaction, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Create Multiple Issue Return Part Transactions
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<IssueReturnPartTransaction>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueReturnApiInterface
     */
    createIssueReturnPartTransaction1(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<IssueReturnPartTransaction>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * IssueReturnApi - object-oriented interface
 * @export
 * @class IssueReturnApi
 * @extends {BaseAPI}
 */
export class IssueReturnApi extends BaseAPI implements IssueReturnApiInterface {
    /**
     * 
     * @summary Create Issue Return Part Transaction
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {IssueReturnPartTransaction} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueReturnApi
     */
    public createIssueReturnPartTransaction(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: IssueReturnPartTransaction, options?: RawAxiosRequestConfig) {
        return IssueReturnApiFp(this.configuration).createIssueReturnPartTransaction(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Issue Return Part Transactions
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<IssueReturnPartTransaction>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueReturnApi
     */
    public createIssueReturnPartTransaction1(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<IssueReturnPartTransaction>, options?: RawAxiosRequestConfig) {
        return IssueReturnApiFp(this.configuration).createIssueReturnPartTransaction1(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LotApi - axios parameter creator
 * @export
 */
export const LotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Lot
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Lot} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLot: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Lot, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LotApi - functional programming interface
 * @export
 */
export const LotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Lot
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Lot} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLot(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Lot, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLot(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LotApi.createLot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LotApi - factory interface
 * @export
 */
export const LotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LotApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Lot
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Lot} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLot(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Lot, options?: any): AxiosPromise<void> {
            return localVarFp.createLot(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LotApi - interface
 * @export
 * @interface LotApi
 */
export interface LotApiInterface {
    /**
     * 
     * @summary Create Lot
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Lot} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotApiInterface
     */
    createLot(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Lot, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * LotApi - object-oriented interface
 * @export
 * @class LotApi
 * @extends {BaseAPI}
 */
export class LotApi extends BaseAPI implements LotApiInterface {
    /**
     * 
     * @summary Create Lot
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Lot} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotApi
     */
    public createLot(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Lot, options?: RawAxiosRequestConfig) {
        return LotApiFp(this.configuration).createLot(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeterApi - axios parameter creator
 * @export
 */
export const MeterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Meter Reading
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {MeterReading} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeterReading: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: MeterReading, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meters/reading`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeterApi - functional programming interface
 * @export
 */
export const MeterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Meter Reading
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {MeterReading} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeterReading(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: MeterReading, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeterReading(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeterApi.createMeterReading']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeterApi - factory interface
 * @export
 */
export const MeterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeterApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Meter Reading
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {MeterReading} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeterReading(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: MeterReading, options?: any): AxiosPromise<void> {
            return localVarFp.createMeterReading(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeterApi - interface
 * @export
 * @interface MeterApi
 */
export interface MeterApiInterface {
    /**
     * 
     * @summary Create Meter Reading
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {MeterReading} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeterApiInterface
     */
    createMeterReading(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: MeterReading, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * MeterApi - object-oriented interface
 * @export
 * @class MeterApi
 * @extends {BaseAPI}
 */
export class MeterApi extends BaseAPI implements MeterApiInterface {
    /**
     * 
     * @summary Create Meter Reading
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {MeterReading} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeterApi
     */
    public createMeterReading(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: MeterReading, options?: RawAxiosRequestConfig) {
        return MeterApiFp(this.configuration).createMeterReading(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PartsApi - axios parameter creator
 * @export
 */
export const PartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Part
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPart: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePart: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deletePart', 'code', code)
            const localVarPath = `/parts/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Part
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPart: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('readPart', 'number', number)
            const localVarPath = `/parts/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePart: async (code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updatePart', 'code', code)
            const localVarPath = `/parts/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartsApi - functional programming interface
 * @export
 */
export const PartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Part
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPart(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPart(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartsApi.createPart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartsApi.deletePart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Part
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPart(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPart(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartsApi.readPart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartsApi.updatePart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PartsApi - factory interface
 * @export
 */
export const PartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Part
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPart(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: any): AxiosPromise<void> {
            return localVarFp.createPart(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Part
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPart(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readPart(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Part
         * @param {string} code 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Part} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: any): AxiosPromise<void> {
            return localVarFp.updatePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartsApi - interface
 * @export
 * @interface PartsApi
 */
export interface PartsApiInterface {
    /**
     * 
     * @summary Create Part
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Part} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApiInterface
     */
    createPart(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Part
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApiInterface
     */
    deletePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Part
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApiInterface
     */
    readPart(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Part
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Part} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApiInterface
     */
    updatePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PartsApi - object-oriented interface
 * @export
 * @class PartsApi
 * @extends {BaseAPI}
 */
export class PartsApi extends BaseAPI implements PartsApiInterface {
    /**
     * 
     * @summary Create Part
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Part} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApi
     */
    public createPart(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig) {
        return PartsApiFp(this.configuration).createPart(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Part
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApi
     */
    public deletePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return PartsApiFp(this.configuration).deletePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Part
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApi
     */
    public readPart(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return PartsApiFp(this.configuration).readPart(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Part
     * @param {string} code 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Part} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartsApi
     */
    public updatePart(code: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Part, options?: RawAxiosRequestConfig) {
        return PartsApiFp(this.configuration).updatePart(code, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StoreBinApi - axios parameter creator
 * @export
 */
export const StoreBinApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStoreBin: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storebin/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreBin: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storebin/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStoreBin: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storebin/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStoreBin: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storebin/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreBinApi - functional programming interface
 * @export
 */
export const StoreBinApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreBinApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreBinApi.createStoreBin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreBinApi.deleteStoreBin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreBinApi.readStoreBin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoreBinApi.updateStoreBin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StoreBinApi - factory interface
 * @export
 */
export const StoreBinApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreBinApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: any): AxiosPromise<void> {
            return localVarFp.createStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: any): AxiosPromise<void> {
            return localVarFp.readStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Store Bin
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Bin} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: any): AxiosPromise<void> {
            return localVarFp.updateStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreBinApi - interface
 * @export
 * @interface StoreBinApi
 */
export interface StoreBinApiInterface {
    /**
     * 
     * @summary Create Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApiInterface
     */
    createStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApiInterface
     */
    deleteStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApiInterface
     */
    readStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApiInterface
     */
    updateStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * StoreBinApi - object-oriented interface
 * @export
 * @class StoreBinApi
 * @extends {BaseAPI}
 */
export class StoreBinApi extends BaseAPI implements StoreBinApiInterface {
    /**
     * 
     * @summary Create Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApi
     */
    public createStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig) {
        return StoreBinApiFp(this.configuration).createStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApi
     */
    public deleteStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig) {
        return StoreBinApiFp(this.configuration).deleteStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApi
     */
    public readStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig) {
        return StoreBinApiFp(this.configuration).readStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Store Bin
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Bin} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreBinApi
     */
    public updateStoreBin(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Bin, options?: RawAxiosRequestConfig) {
        return StoreBinApiFp(this.configuration).updateStoreBin(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkOrderActivitiesApi - axios parameter creator
 * @export
 */
export const WorkOrderActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderActivity: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('createWorkOrderActivity', 'number', number)
            const localVarPath = `/workorders/activities/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Work Order Activities
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderActivities: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('readWorkOrderActivities', 'number', number)
            const localVarPath = `/workorders/activities/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrderActivity: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('updateWorkOrderActivity', 'number', number)
            const localVarPath = `/workorders/activities/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkOrderActivitiesApi - functional programming interface
 * @export
 */
export const WorkOrderActivitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkOrderActivitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrderActivitiesApi.createWorkOrderActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Work Order Activities
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWorkOrderActivities(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWorkOrderActivities(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrderActivitiesApi.readWorkOrderActivities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrderActivitiesApi.updateWorkOrderActivity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkOrderActivitiesApi - factory interface
 * @export
 */
export const WorkOrderActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkOrderActivitiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: any): AxiosPromise<void> {
            return localVarFp.createWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Work Order Activities
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderActivities(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readWorkOrderActivities(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Work Order Activity
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Activity} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: any): AxiosPromise<void> {
            return localVarFp.updateWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkOrderActivitiesApi - interface
 * @export
 * @interface WorkOrderActivitiesApi
 */
export interface WorkOrderActivitiesApiInterface {
    /**
     * 
     * @summary Create Work Order Activity
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Activity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApiInterface
     */
    createWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Work Order Activities
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApiInterface
     */
    readWorkOrderActivities(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Work Order Activity
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Activity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApiInterface
     */
    updateWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * WorkOrderActivitiesApi - object-oriented interface
 * @export
 * @class WorkOrderActivitiesApi
 * @extends {BaseAPI}
 */
export class WorkOrderActivitiesApi extends BaseAPI implements WorkOrderActivitiesApiInterface {
    /**
     * 
     * @summary Create Work Order Activity
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Activity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApi
     */
    public createWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig) {
        return WorkOrderActivitiesApiFp(this.configuration).createWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Work Order Activities
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApi
     */
    public readWorkOrderActivities(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return WorkOrderActivitiesApiFp(this.configuration).readWorkOrderActivities(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Work Order Activity
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Activity} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrderActivitiesApi
     */
    public updateWorkOrderActivity(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Activity, options?: RawAxiosRequestConfig) {
        return WorkOrderActivitiesApiFp(this.configuration).updateWorkOrderActivity(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkOrdersApi - axios parameter creator
 * @export
 */
export const WorkOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Work Order
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrder: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workorders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workorders/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkOrder: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('deleteWorkOrder', 'number', number)
            const localVarPath = `/workorders/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkOrderList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workorders/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrder: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('readWorkOrder', 'number', number)
            const localVarPath = `/workorders/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Multiple Work Orders
         * @param {string} workorders 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderList: async (workorders: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workorders' is not null or undefined
            assertParamExists('readWorkOrderList', 'workorders', workorders)
            const localVarPath = `/workorders/list/{workorders}`
                .replace(`{${"workorders"}}`, encodeURIComponent(String(workorders)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrder: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('updateWorkOrder', 'number', number)
            const localVarPath = `/workorders/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrderList: async (iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workorders/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkOrdersApi - functional programming interface
 * @export
 */
export const WorkOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Work Order
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkOrder(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkOrder(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.createWorkOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.createWorkOrderList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.deleteWorkOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.deleteWorkOrderList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.readWorkOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Multiple Work Orders
         * @param {string} workorders 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWorkOrderList(workorders: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWorkOrderList(workorders, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.readWorkOrderList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.updateWorkOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersApi.updateWorkOrderList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkOrdersApi - factory interface
 * @export
 */
export const WorkOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkOrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Work Order
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrder(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: any): AxiosPromise<void> {
            return localVarFp.createWorkOrder(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: any): AxiosPromise<void> {
            return localVarFp.createWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Multiple Work Orders
         * @param {string} workorders 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderList(workorders: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readWorkOrderList(workorders, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Work Order
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {WorkOrder} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: any): AxiosPromise<void> {
            return localVarFp.updateWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Work Orders
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {Array<WorkOrder>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: any): AxiosPromise<void> {
            return localVarFp.updateWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkOrdersApi - interface
 * @export
 * @interface WorkOrdersApi
 */
export interface WorkOrdersApiInterface {
    /**
     * 
     * @summary Create Work Order
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {WorkOrder} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    createWorkOrder(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Create Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<WorkOrder>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    createWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    deleteWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    deleteWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    readWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Multiple Work Orders
     * @param {string} workorders 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    readWorkOrderList(workorders: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {WorkOrder} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    updateWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Update Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<WorkOrder>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApiInterface
     */
    updateWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * WorkOrdersApi - object-oriented interface
 * @export
 * @class WorkOrdersApi
 * @extends {BaseAPI}
 */
export class WorkOrdersApi extends BaseAPI implements WorkOrdersApiInterface {
    /**
     * 
     * @summary Create Work Order
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {WorkOrder} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public createWorkOrder(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).createWorkOrder(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<WorkOrder>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public createWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).createWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public deleteWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).deleteWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public deleteWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<string>, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).deleteWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public readWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).readWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Multiple Work Orders
     * @param {string} workorders 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public readWorkOrderList(workorders: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).readWorkOrderList(workorders, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Work Order
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {WorkOrder} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public updateWorkOrder(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: WorkOrder, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).updateWorkOrder(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Work Orders
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {Array<WorkOrder>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersApi
     */
    public updateWorkOrderList(iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: Array<WorkOrder>, options?: RawAxiosRequestConfig) {
        return WorkOrdersApiFp(this.configuration).updateWorkOrderList(iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkOrdersLaborBookingsApi - axios parameter creator
 * @export
 */
export const WorkOrdersLaborBookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Book Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {LaborBooking} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderLaborBooking: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: LaborBooking, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('createWorkOrderLaborBooking', 'number', number)
            const localVarPath = `/workorders/laborbookings/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderLaborBooking: async (number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('readWorkOrderLaborBooking', 'number', number)
            const localVarPath = `/workorders/laborbookings/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iNFORUSER != null) {
                localVarHeaderParameter['INFOR_USER'] = String(iNFORUSER);
            }

            if (iNFORPASSWORD != null) {
                localVarHeaderParameter['INFOR_PASSWORD'] = String(iNFORPASSWORD);
            }

            if (iNFORTENANT != null) {
                localVarHeaderParameter['INFOR_TENANT'] = String(iNFORTENANT);
            }

            if (iNFORORGANIZATION != null) {
                localVarHeaderParameter['INFOR_ORGANIZATION'] = String(iNFORORGANIZATION);
            }

            if (iNFORLOCALIZERESULTS != null) {
                localVarHeaderParameter['INFOR_LOCALIZE_RESULTS'] = typeof iNFORLOCALIZERESULTS === 'string'
                    ? iNFORLOCALIZERESULTS
                    : JSON.stringify(iNFORLOCALIZERESULTS);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkOrdersLaborBookingsApi - functional programming interface
 * @export
 */
export const WorkOrdersLaborBookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkOrdersLaborBookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Book Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {LaborBooking} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: LaborBooking, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersLaborBookingsApi.createWorkOrderLaborBooking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkOrdersLaborBookingsApi.readWorkOrderLaborBooking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkOrdersLaborBookingsApi - factory interface
 * @export
 */
export const WorkOrdersLaborBookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkOrdersLaborBookingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Book Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {LaborBooking} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: LaborBooking, options?: any): AxiosPromise<void> {
            return localVarFp.createWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Work Order Labor
         * @param {string} number 
         * @param {string} [iNFORUSER] Username
         * @param {string} [iNFORPASSWORD] Password
         * @param {string} [iNFORTENANT] Infor Tenant
         * @param {string} [iNFORORGANIZATION] Infor Organization
         * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
         * @param {string} [authorization] OIDC Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.readWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkOrdersLaborBookingsApi - interface
 * @export
 * @interface WorkOrdersLaborBookingsApi
 */
export interface WorkOrdersLaborBookingsApiInterface {
    /**
     * 
     * @summary Book Work Order Labor
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {LaborBooking} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersLaborBookingsApiInterface
     */
    createWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: LaborBooking, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Read Work Order Labor
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersLaborBookingsApiInterface
     */
    readWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * WorkOrdersLaborBookingsApi - object-oriented interface
 * @export
 * @class WorkOrdersLaborBookingsApi
 * @extends {BaseAPI}
 */
export class WorkOrdersLaborBookingsApi extends BaseAPI implements WorkOrdersLaborBookingsApiInterface {
    /**
     * 
     * @summary Book Work Order Labor
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {LaborBooking} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersLaborBookingsApi
     */
    public createWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, body?: LaborBooking, options?: RawAxiosRequestConfig) {
        return WorkOrdersLaborBookingsApiFp(this.configuration).createWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Work Order Labor
     * @param {string} number 
     * @param {string} [iNFORUSER] Username
     * @param {string} [iNFORPASSWORD] Password
     * @param {string} [iNFORTENANT] Infor Tenant
     * @param {string} [iNFORORGANIZATION] Infor Organization
     * @param {boolean} [iNFORLOCALIZERESULTS] Localize Results
     * @param {string} [authorization] OIDC Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkOrdersLaborBookingsApi
     */
    public readWorkOrderLaborBooking(number: string, iNFORUSER?: string, iNFORPASSWORD?: string, iNFORTENANT?: string, iNFORORGANIZATION?: string, iNFORLOCALIZERESULTS?: boolean, authorization?: string, options?: RawAxiosRequestConfig) {
        return WorkOrdersLaborBookingsApiFp(this.configuration).readWorkOrderLaborBooking(number, iNFORUSER, iNFORPASSWORD, iNFORTENANT, iNFORORGANIZATION, iNFORLOCALIZERESULTS, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



